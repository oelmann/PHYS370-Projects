#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#include <string.h>
#include <time.h>
#include <mygraph.h>

#define D 3
#define N 27

double x0[N][D],v0[N][D],M[N];
double x[N][D],v[N][D];
double dt=0.01,t=0;
// GUI variables
double xcenter=0,ycenter=0,Scale=100;
double screend=1,objd=2, R=0.3,tety=0, tetx=0;
typedef struct part_ {double x[D]; int c} part;

#define L 10000 
double trace[N][L][D];
int traceL=0,Lmax=L;

int compare(double x1[D],double x2[D]){
  if (x1[2]<x2[2]) return 1;
  else return -1;
}

void draw3d(int xdim, int ydim){
  part xl[N];
  for (int n=0; n<N; n++){
    xl[n].c=n+1;
    for (int d=0; d<D; d++)
      xl[n].x[d]=x[n][d];
  }
  //  memcpy(&xl[0].x[0],&x[0][0],N*sizeof(part));
  // rotate around y axis
  double cty=cos(tety);
  double sty=sin(tety);
  for (int n=0; n<N; n++){
    double ztmp= cty*xl[n].x[2]-sty*xl[n].x[0];
    double xtmp= sty*xl[n].x[2]+cty*xl[n].x[0];
    xl[n].x[0]=xtmp;
    xl[n].x[2]=ztmp;
  }
  double ctx=cos(tetx);
  double stx=sin(tetx);
  for (int n=0; n<N; n++){
    double ztmp= ctx*xl[n].x[2]+stx*xl[n].x[1];
    double ytmp= -stx*xl[n].x[2]+ctx*xl[n].x[1];
    xl[n].x[1]=ytmp;
    xl[n].x[2]=ztmp;
  }
  
  qsort(&xl[0].x[0],N,sizeof(part),compare);
  for (int n=0; n<N; n++){
    int xc=xdim/2+Scale*screend*xl[n].x[0]/(xl[n].x[2]+objd);
    int yc=ydim/2-Scale*screend*xl[n].x[1]/(xl[n].x[2]+objd);
    int rc=Scale*R*screend/(xl[n].x[2]+objd);
    myfilledcircle(xl[n].c,xc,yc,rc);
  }
}



void draw(int xdim, int ydim){
  for (int n=0; n<N; n++){
    int xc=xdim/2+(x[n][0]-xcenter)*Scale;
    int yc=ydim/2-(x[n][1]-ycenter)*Scale;
    int rc=10;
    myfilledcircle(n+1,xc,yc,rc);
  }
}
void draw_trace(int xdim, int ydim){
  if (traceL>1){
    for (int n=0; n<N; n++){
      XPoint xp[traceL];
      for (int l=0; l<traceL; l++){
	xp[l].x=xdim/2+(trace[n][l][0]-xcenter)*Scale;
	xp[l].y=ydim/2-(trace[n][l][1]-ycenter)*Scale;
      }
      myline_polygon(n+1,xp,traceL);
    }
  }
}

void update_trace(){
  while (traceL>=Lmax){
    traceL--;
    for (int n=0; n<N; n++){
      for (int l=0; l<traceL; l++)
	for (int d=0; d<D; d++)
	  trace[n][l][d]=trace[n][l+1][d];
    }
  }
  for (int n=0; n<N; n++){
    for (int d=0; d<D; d++){
      trace[n][traceL][d]=x[n][d];
    }
  }
  traceL++;
}

void getP(double v[N][D],double M[N],double P[D]){
  for (int d=0; d<D; d++) P[d]=0;
  for (int n=0; n<N; n++){
    for (int d=0; d<D; d++){
      P[d]+=M[n]*v[n][d];
    }
  }
}

void SetP0(double v[N][D],double M[N]){
  double P[D];
  getP(v,M,P);
  double MM=0;
  for (int n=0; n<N; n++) MM+=M[n];
  double V[D];
  for (int d=0; d<D; d++) V[d]=P[d]/MM;

  for (int n=0; n<N; n++)
    for (int d=0; d<D; d++)
      v[n][d]-=V[d];
}

double getE(double M[N],double x[N][D],double v[N][D]){
  // Ek+Ep
  double E=0;
  
  for (int n=0; n<N; n++){
    double v2=0;
    for (int d=0; d<D; d++) v2+=v[n][d]*v[n][d];
    E+=0.5*M[n]*v2;
  }

  // Ep = -G*m1*m2/r
  for (int n=0; n<N; n++){
    for (int m=0; m<n; m++){
      double r2=0;
      for (int d=0; d<D; d++)
	r2+=(x[n][d]-x[m][d])*(x[n][d]-x[m][d]);
      E+=-M[n]*M[m]/sqrt(r2);
    }
  }
  return E;
}

void getF(double F[N][D]){
  double dr[D],absdr2;
  memset(&F[0][0],0,N*D*sizeof(double));
  for (int n=0; n<N; n++)
    for (int m=0; m<n; m++){
      absdr2=0;
      for (int d=0; d<D; d++){
	dr[d]=x[m][d]-x[n][d];
	absdr2+=dr[d]*dr[d];
      }
      for (int d=0; d<D; d++){
	double Fscal=M[n]*M[m]/(absdr2*sqrt(absdr2));
	F[n][d]+=Fscal*dr[d];
	F[m][d]-=Fscal*dr[d];
      }
    }
}

void iterate(double x[N][D],double v[N][D],double dt){
  double F[N][D]; // \vec{F} = G m*m/r^3 \vec{r}
  // get the force on all N particles
  getF(F);

  // update positions and velocities with the Verlet algorithm
  for (int n=0; n<N; n++){
    for (int i=0; i<D; i++){
      v[n][i]+=0.5*F[n][i]/M[n]*dt;
      x[n][i]+=v[n][i]*dt;
    }
  }
  getF(F);
  for (int n=0; n<N; n++){
    for (int i=0; i<D; i++){
      v[n][i]+=0.5*F[n][i]/M[n]*dt;
    }
  }
}

void initconfig(){
  for (int x=0; x<3; x++)
    for (int y=0; y<3; y++)
      for (int z=0; z<3; z++){
	x0[x+3*(y+3*z)][0]=x-1;
	x0[x+3*(y+3*z)][1]=y-1;
	x0[x+3*(y+3*z)][2]=z-1;	
      }
  for (int n=0; n<N; n++){
    M[n]=1;
    for (int d=0; d<D; d++){
      v0[n][d]=0;
    }
  }
}

void init(){
  t=0;
  traceL=0;
  for (int n=0; n<N; n++)
    for (int i=0; i<D; i++){
      x[n][i]=x0[n][i];
      v[n][i]=v0[n][i];
    }
  SetP0(v,M);
}

int main(){
  struct timespec TimeSpec;
  int done=0, cont=0,sstep=0,repeat=1;
  double E;
  AddFreedraw("planets",draw);
  AddFreedraw("traces",draw_trace);
  if (D==3)
    AddFreedraw("3d view",draw3d);  
  
  StartMenu("Planets",1);
  StartMenu("Init",0);
  for (int n=0; n<N; n++){
    DefineDouble("m",&M[n]);
    for (int d=0; d<D; d++){
      DefineDouble("x",&x0[n][d]);
    }
    for (int d=0; d<D; d++){
      DefineDouble("v",&v0[n][d]);
    }
  }
  DefineFunction("Init",init);
  EndMenu();
  DefineGraph(freedraw_,"Planets");
  DefineDouble("Scale",&Scale);
  if (D==3){
    DefineDouble("screen dist",&screend);
    DefineDouble("obj dist",&objd);
    DefineDouble("R",&R);
    DefineDouble("tety",&tety);
    DefineDouble("tetx",&tetx);
  }
  DefineMod("Trace length",&Lmax,L);
  DefineLong("wait",&TimeSpec.tv_nsec);
  DefineDouble("dt",&dt);
  DefineDouble("E",&E);
  DefineInt("Repeat",&repeat);
  DefineBool("sstep",&sstep);
  DefineBool("cont",&cont);
  DefineBool("done",&done);
  EndMenu();

  initconfig();
  init();
  TimeSpec.tv_sec=0;
  TimeSpec.tv_nsec=10000000;
  
  while (!done){
    Events(1);
    DrawGraphs();
    nanosleep(&TimeSpec,NULL);
    E=getE(M,x,v);
    if (cont||sstep){
      sstep=0;
      update_trace();
      for (int i=0; i<repeat; i++){
	iterate(x,v,dt);
	t+=dt;
      }
    }
  }
}
